#version 450

struct particleData
{
	vec4 position;
	vec4 velocity;
	vec4 colour;
	vec4 alphaAge;
	vec4 newVelocity;
	//vec4 otherShit;	//x is alpha, y is gravity etc
	//float isAlpha;
	//float gravityMult;
	//float damping;
	//float age;
};

layout(std430, binding = 0) buffer data
{
	particleData particles[];
};

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

uniform float deltaTime;


void main()
{
	uint gid = gl_GlobalInvocationID.x;	
	
	const float dt = deltaTime;
	const vec3 gravity = vec3(0.0f, -9.82f, 0.0f);
	vec3 force = gravity * dt * -0.5f;
	vec3 acc = force / 0.5;
	
	vec3 p = particles[gid].position.xyz;
	vec3 v = particles[gid].velocity.xyz;
	
	particles[gid].alphaAge.y -= dt;
	if(particles[gid].alphaAge.y < 0)
	{
		particles[gid].position.xyz = vec3(0.0f, 0.0f, 0.0f);
		particles[gid].velocity.xyz = particles[gid].newVelocity.xyz;
		particles[gid].alphaAge.y = particles[gid].alphaAge.z;
	}
	
	particles[gid].position.xyz += v * dt;
	particles[gid].velocity.xyz += acc * dt;	
	particles[gid].velocity.xyz *= 0.999;
}